// Generated by CoffeeScript 1.9.3
(function() {
  var AllNodes, dirTree, fs, path, readConfig, setConfig, toHash, util;

  fs = require('fs');

  path = require('path');

  toHash = function(s) {
    return s.split("").reduce(function(a, b) {
      a = ((a << 5) - a) + b.charCodeAt(0);
      return a & a;
    }, 0);
  };

  AllNodes = {};

  readConfig = function(configFile) {
    if (fs.existsSync(configFile)) {
      return JSON.parse(fs.readFileSync(configFile, 'utf8'));
    } else {
      return null;
    }
  };

  setConfig = function(moreinfo, info, path) {
    var attrib, childattrib, ref, value;
    for (attrib in moreinfo) {
      value = moreinfo[attrib];
      if ((path != null) && attrib === "templateURI") {
        moreinfo["templateURI"] = path + "/" + moreinfo["templateURI"];
      }
      if (typeof moreinfo[attrib] === "object" && typeof info[attrib] !== "undefined") {
        ref = moreinfo[attrib];
        for (childattrib in ref) {
          value = ref[childattrib];
          info[attrib][childattrib] = moreinfo[attrib][childattrib];
        }
      } else {
        info[attrib] = moreinfo[attrib];
      }
    }
    return null;
  };

  dirTree = function(filename, lvl, parent) {
    var ChildId, FileExt, FileName, FileNameWithoutExt, NodeId, Title, childStat, childfile, commonConfigFile, commonInfo, configFile, cpath, files, info, k, moreinfo, v;
    cpath = path.dirname(filename);
    if (cpath.substring(0, 3) === "../") {
      cpath = cpath.substring(3);
    }
    FileExt = path.extname(filename);
    FileName = path.basename(filename);
    FileNameWithoutExt = FileName.substring(0, FileName.length - FileExt.length);
    Title = FileNameWithoutExt.split('_').splice(0, 1).join(' ').split('.')[0];
    info = {
      "order": 0,
      "path": cpath,
      "icon": "fa-file-o",
      "title": Title,
      "name": FileName,
      "status": "expand",
      "children": [],
      "level": lvl,
      "description": "",
      "templateURI": "",
      "templateType": "jade",
      "templateContent": "",
      "data": {},
      "parent": parent,
      "breadcrumbs": true,
      "leftMenu": {
        "menuClass": "",
        "menuNodeClass": "",
        "viewMode": "treeview",
        "source": "children",
        "columns": "4",
        "offset": "0"
      },
      "main": {
        "class": "",
        "offset": "0",
        "columns": "8"
      },
      relativePath: null
    };
    NodeId = 'node' + toHash(info.path + "/" + info.name);
    configFile = info.path + "/" + FileName + "/config.json";
    moreinfo = readConfig(configFile);
    if (moreinfo !== null) {
      if (moreinfo.config !== void 0 && moreinfo.config !== null) {
        commonConfigFile = info.path + "/" + moreinfo.config + "/config.json";
        commonInfo = readConfig(commonConfigFile);
        setConfig(commonInfo, info, moreinfo.relativePath);
      } else {
        moreinfo.config = null;
      }
      setConfig(moreinfo, info, moreinfo.relativePath);
    }
    files = fs.readdirSync(filename);
    for (k in files) {
      v = files[k];
      childfile = filename + '/' + files[k];
      childStat = fs.lstatSync(childfile);
      if (!childStat.isDirectory() || files[k][0] === ".") {
        continue;
      }
      ChildId = dirTree(childfile, lvl + 1, NodeId);
      info.children.push(ChildId);
    }
    AllNodes[NodeId] = info;
    return NodeId;
  };

  if (!module.parent) {
    util = require('util');
    dirTree(process.argv[2], 0, "");
    console.log(JSON.stringify(AllNodes, false, null));
  }

}).call(this);
